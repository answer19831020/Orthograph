#!/usr/bin/env perl
#--------------------------------------------------
# This file is part of Orthograph.
# Copyright 2013 Malte Petersen <mptrsen@uni-bonn.de>
# 
# Orthograph is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# Orthograph is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# Orthograph. If not, see http://www.gnu.org/licenses/.
#-------------------------------------------------- 

# Pragmas
use strict;         # make me write clean code
use warnings;       # cry if something seems odd
use autodie;        # die automatically on I/O functions

# Core modules
use Carp;           # carp and croak: warn and die with call stack
use DBD::mysql;     # MySQL database driver
use DBI;            # database interface
use File::Temp;     # temporary files
use File::Path qw( remove_tree make_path );	# this also uses File::Spec
use FindBin;        # locate the dir of this script during compile time
use Getopt::Long;   # parse command line arguments
use Data::Dumper;   # good for debugging

# Custom modules
use lib $FindBin::Bin;                   # $Bin is the directory of the original script
use Seqload::Fasta qw( check_if_fasta ); # object-oriented access to fasta files
use Orthograph::Functions;               # functions for all Orthograph tools
use Orthograph::Config;                  # configuration in global hashref $config
use Wrapper::Mysql;                      # because SQL queries in main code look ugly

#--------------------------------------------------
# # Copy configuration
#-------------------------------------------------- 
my $config = $Orthograph::Config::config;

#--------------------------------------------------
# # These variables can be set in the config file
#-------------------------------------------------- 
#{{{
my $mysql_dbname            = $config->{'mysql-database'};
my $mysql_dbpwd             = $config->{'mysql-password'};
my $mysql_dbserver          = $config->{'mysql-server'};
my $mysql_dbuser            = $config->{'mysql-username'};
my $mysql_prefix            = $config->{'mysql-prefix'};
my $mysql_table_blastdbs    = $config->{'mysql_table_blastdbs'};
my $mysql_table_ests        = $config->{'mysql_table_ests'};
my $mysql_table_hmmsearch   = $config->{'mysql_table_hmmsearch'};
my $mysql_table_set_details = $config->{'mysql_table_set_details'};
my $mysql_table_aaseqs      = $config->{'mysql_table_aaseqs'};
my $mysql_table_ntseqs      = $config->{'mysql_table_ntseqs'};
my $mysql_table_ogs         = $config->{'mysql_table_ogs'};
my $mysql_table_orthologs   = $config->{'mysql_table_orthologs'};
my $mysql_table_seqpairs    = $config->{'mysql_table_sequence_pairs'};
my $mysql_table_seqtypes    = $config->{'mysql_table_sequence_types'};
my $mysql_table_taxa        = $config->{'mysql_table_taxa'};
my $mysql_table_temp        = $config->{'mysql_table_temp'};
my $mysql_table_users       = $config->{'mysql_table_users'};

# Actions
my $create                  = $config->{'create'};
my $delete_all              = $config->{'destroy'};
my $delete_ogs              = $config->{'delete-ogs'};
my $delete_set              = $config->{'delete-set'};
my $listtaxa                = $config->{'list-taxa'};
my $listsets                = $config->{'list-sets'};
my $listogs                 = $config->{'list-ogs'};
my $isnucleotide            = $config->{'load-ogs-nucleotide'};
my $ispeptide               = $config->{'load-ogs-peptide'};

# other variables
my $verbose                 = $config->{'verbose'};

# substitution character for selenocysteine, which normally leads to blast freaking out
my $u_subst                 = $config->{'substitute-u-with'};

# table names. too lazy to change all of them, so i'll just reuse the old hash structure
my %t            = (
	'aaseqs'       => $mysql_table_aaseqs,
	'blastdbs'     => $mysql_table_blastdbs,
	'ntseqs'       => $mysql_table_ntseqs,
	'ogs'          => $mysql_table_ogs,
	'orthologs'    => $mysql_table_orthologs,
	'seqpairs'     => $mysql_table_seqpairs,
	'seqtypes'     => $mysql_table_seqtypes,
	'set_details'  => $mysql_table_set_details,
	'taxa'         => $mysql_table_taxa,
	'temp'         => $mysql_table_temp,
	'users'        => $mysql_table_users,
);

my $blastdir          = '';
my $description       = '';
my $listests          = 0;
my $name              = '';
my $ogs_name          = '';
my $overwrite         = 0;
my $reassignorthologs = 0;
my $setdir            = '';
my $setname           = '';
				my $sql               = '';
my $temptable         = $mysql_table_temp;
my $total_seqs        = 0;
my %names             = ( );

my $infile = '';

unless (defined $mysql_dbuser and defined $mysql_dbpwd ) {
	die "Fatal: You must specify database username (--mysql-username) and password (--mysql-password).\n";
}

# name == username unless defined name
$name = $mysql_dbuser unless defined($name);

#--------------------------------------------------
# # if you really want to delete everything...
#-------------------------------------------------- 
if ($delete_all) {
	print "This will erase your Orthograph database structure. Are you sure (y/n)? ";
	&get_yn() or exit;
	print "OK, whatever you say.\n";
	&drop_tables;
	print "OK.\n";
	exit;
}
#--------------------------------------------------
# # if you only want me to create the tables, fine. this will give you a clean slate.
#-------------------------------------------------- 
elsif ($create) {
	print "This will create a new Orthograph table structure in the database '$mysql_dbname' with the table prefix '$mysql_prefix'.\nAny existing Orthograph table structures with that prefix will be erased. Are you sure (y/n)? ";
	&get_yn() or exit;
	&drop_tables;
	&create_tables;
	print "Created Orthograph table structure in database '$mysql_dbname'.\n";
	exit;
}

elsif ($delete_set) { 
	&delete_set($delete_set);
	print "OK, removed set '$delete_set' completely.\n";
	exit;
}
elsif ($delete_ogs) {
	print "Deleting OGS sequences from $delete_ogs. Are you sure (y/n)? ";
	&get_yn() or exit;
	my $c = &delete_ogs($delete_ogs);
	print "OK, removed $c sequences for OGS '$delete_ogs' from the database.\n";
	exit;
}

#--------------------------------------------------
# Just list the present ortholog sets, then exit
# TODO make this less redundant!
#-------------------------------------------------- 
if ($listsets) {
	&list_sets and exit;
}

elsif ($listogs) {
	&list_ogs and exit;
}

elsif ($listtaxa) {
	&list_set_details and exit;
}

elsif ($isnucleotide) {
	$infile = $isnucleotide;
	# 0 for nucleotide
	&load_taxon($infile, 0) or die("Fatal: Nucleotide loading failed\n");
	exit;
}
elsif ($ispeptide) {
	$infile = $ispeptide;
	# 1 for amino-acid
	&load_taxon($infile, 1) or die("Fatal: Peptide loading failed\n");
	exit;
}

# otherwise, this must be an orthodb file
$infile = shift @ARGV;

#--------------------------------------------------
# # continue and gather information
#-------------------------------------------------- 

# TODO stop here if db structure is not present!

print "Setting up core ortholog set in $mysql_dbname on $mysql_dbserver... (press CTRL+C to abort)\n";

if (!$setname) { $setname = &get_setname() }

# TODO rewrite this part using parametrized queries to protect from SQL injections?
if (&mysql_check("SELECT name FROM $t{'set_details'} WHERE name = '$setname'")) {
	warn "Warning: An ortholog set with this name already exists in $mysql_dbname on $mysql_dbserver.\n";
	unless ($overwrite) {
		die "Pick a different name or use -o for overwriting.\n";
	}
	$| = 1;
	print "Overwriting existing entries (may cause data disintegration). ";
	print "Are you sure (y/n)? ";
	$| = 0;
	my $yn = readline(STDIN);
	chomp $yn;
	unless ($yn =~ /^[yn]$/i) {
		print "OK, exiting.\n";
		exit;
	}
}

print "Enter a description for the set (optional but recommended): "; 
$description = <STDIN>;
chomp $description;

unless (defined $setname) { croak "Fatal: You must specify the core-ortholog set name (-s).\n" }

#--------------------------------------------------
# # read the input file and create a CSV file with everything we know 
#-------------------------------------------------- 

my $tmpfile = File::Temp->new(UNLINK=>1);

my $faobj = Seqload::Fasta->open($infile);
no warnings;	# disable warnings for printing of the NULL column
while (my ($hdr, $seq) = $faobj->next_seq()) {
	$seq =~ s/-//g;	# remove all gaps from the sequence
	if ($seq =~ /([^ACDEFGHIKLMNPQRSTVWYX*])/) {
		# change all Us to X if requested
		if ($u_subst and $seq =~ s/U/$u_subst/gi) {
			warn("Warning: Selenocysteine character ('U') replaced with '$u_subst' in sequence '$hdr'.\n");
		}
		else {
			warn("Warning: Sequence $hdr contains nonstandard amino acid symbol '$1'! Make sure your alignment program tolerates this.\n");
		}
	}
	++$total_seqs;
	# no commas in the header please, they confuse the csv parser
	$hdr =~ s/,/_/g;
	my @headerfields = split(/\s+/, $hdr, 5);	# maximum of five fields, the last one may contain whitespace
	# no colons either
	$headerfields[3] =~ s/:/_/g if defined $headerfields[3];

	# if the original proteome is missing, this can't work
	if ($headerfields[1] =~ /^\s*$/) { die("Fatal: Sequence ID missing from '$hdr'! See documentation and double-check your ortholog file.\n") }

	$headerfields[0] =~ s/:.*//;	   # remove everything from the colon
	printf $tmpfile "%s,%s,%s,%s,%s,%s,%s,%s\n", 
		$headerfields[0],              # taxon shorthand
		undef,                         # this will later be the full name
		$setname,	                     # set name
		$headerfields[2],              # orthodb id, e.g. EOG500001
		File::Spec->catdir($blastdir), # blast database directory
		$headerfields[3],              # ogs id
		$seq,                          # sequence
		$description;                  # set description
}
use warnings;	# resume yelling 
print "used file $tmpfile\n" if $verbose;
undef($faobj);
$tmpfile->close();

#--------------------------------------------------
# # create a temporary table for high-speed loading of the data. we can sort it out later.
#-------------------------------------------------- 

my $create_temp_table_query = "CREATE TABLE $temptable (
    `name`     VARCHAR(255), INDEX(name),
    `longname` VARCHAR(255),
		`orthoset` VARCHAR(255), INDEX(orthoset),
		`orthoid`  VARCHAR(255), INDEX(orthoid),
		`blastdb`  VARCHAR(255),
		`header`   VARCHAR(512), INDEX(header),
		`sequence` MEDIUMBLOB,
		`description` VARCHAR(255))";
my $loadquery = "LOAD DATA LOCAL INFILE '$tmpfile' 
  INTO TABLE $temptable FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' (
		name,
		longname,
		orthoset,
		orthoid,
		blastdb,
		header,
		sequence,
		description)";

my $dbh = Wrapper::Mysql::mysql_dbh();
$dbh->do("DROP TABLE IF EXISTS $temptable") or die "Fatal: Could not DROP TABLE $temptable\n";
$dbh->do($create_temp_table_query) or die "Fatal: Could not CREATE TABLE $temptable\n";
$dbh->do($loadquery) or die "Fatal: Could not LOAD DATA into temporary table $temptable\n";
$dbh->disconnect;

print "Successfully loaded $total_seqs sequences from $infile into $temptable on $mysql_dbserver.\n";

# get name and longname from the temp table; they do not get updated automatically
$dbh = Wrapper::Mysql::mysql_dbh();
$sql = $dbh->prepare("SELECT DISTINCT name, longname FROM $temptable");
$sql->execute();
while (my @result = $sql->fetchrow) {
	$names{$result[0]} = '';
}
$dbh->disconnect;

# ask the user for the taxon names that aren't complete
foreach (sort(keys %names)) {
	unless ($names{$_}) {
		print "Enter complete name for the shorthand '$_': ";
		$names{$_} = <STDIN>;
		chomp $names{$_};
	}
}

# update the temptable with the collected info
$dbh = Wrapper::Mysql::mysql_dbh;
foreach (keys %names) {
	$sql = $dbh->prepare("UPDATE $temptable SET longname='$names{$_}' WHERE name='$_'");
	$sql->execute();
}
$dbh->disconnect;

#--------------------------------------------------
# # temptable is now complete. going to insert the data into the main table 
#-------------------------------------------------- 

# TODO check whether the proteome header format is right (protein id only)!
# TODO import the proteome data via a second temptable
# TODO rewrite this part using parametrized queries to protect from SQL injections?

my @queries = (
	# user name
	"INSERT IGNORE INTO $t{'users'} (name) VALUES ('$mysql_dbuser')",
	# taxa (name, longname)
	"INSERT IGNORE INTO $t{'taxa'} (name, longname, core) 
    SELECT DISTINCT $temptable.name, $temptable.longname, 1 
    FROM $temptable",
	# set name + description
	"INSERT IGNORE INTO $t{'set_details'} (name, description)
    SELECT DISTINCT $temptable.orthoset, $temptable.description 
    FROM $temptable LIMIT 1",
	# blast databases
	"INSERT IGNORE INTO $t{'blastdbs'} (setid, blastdb_path) 
    SELECT DISTINCT $t{'set_details'}.id, $temptable.blastdb 
    FROM $temptable
		LEFT JOIN $t{'set_details'} 
      ON $t{'set_details'}.name = $temptable.orthoset",
	# pep sequences
	"INSERT IGNORE INTO $t{'aaseqs'} (taxid, header, sequence, user, date) 
    SELECT $t{'taxa'}.id, $temptable.header, $temptable.sequence, $t{'users'}.id, UNIX_TIMESTAMP()
    FROM $temptable
		  LEFT JOIN $t{'taxa'} 
    ON $temptable.name  = $t{'taxa'}.name
      INNER JOIN $t{'users'}
    ON $t{'users'}.name = '$mysql_dbuser'",
	# delete everything where header or sequence is NULL or empty
	"DELETE FROM $t{'aaseqs'}
    WHERE $t{'aaseqs'}.header IS NULL
    OR $t{'aaseqs'}.sequence IS NULL
    OR $t{'aaseqs'}.header = ''
    OR $t{'aaseqs'}.sequence = ''",
	# sequence pairs (pep-nuc)
	"INSERT IGNORE INTO $t{'seqpairs'} (taxid, ogs_id, aa_seq, nt_seq, date, user)
    SELECT $t{'taxa'}.id, $t{'ogs'}.id, $t{'aaseqs'}.id, $t{'ntseqs'}.id, UNIX_TIMESTAMP(), $t{'users'}.id
    FROM $t{'taxa'}
    INNER JOIN $t{'aaseqs'}
      ON $t{'aaseqs'}.taxid = $t{'taxa'}.id
    LEFT JOIN $t{'ogs'}
      ON $t{'taxa'}.id = $t{'ogs'}.taxid
    LEFT JOIN $t{'ntseqs'}
      ON $t{'aaseqs'}.header = $t{'ntseqs'}.header
    INNER JOIN $t{'users'}
      ON $t{'users'}.name = '$mysql_dbuser'",
	# orthologous groups
	"INSERT IGNORE INTO $t{'orthologs'} (setid, ortholog_gene_id, sequence_pair) 
    SELECT $t{'set_details'}.id, $temptable.orthoid, $t{'seqpairs'}.id 
    FROM $t{'aaseqs'} 
    INNER JOIN $temptable 
      ON $t{'aaseqs'}.header = $temptable.header 
    INNER JOIN $t{'seqpairs'} 
      ON $t{'seqpairs'}.aa_seq = $t{'aaseqs'}.id 
    INNER JOIN $t{'set_details'} 
      ON $t{'set_details'}.name = $temptable.orthoset",
);

$dbh = Wrapper::Mysql::mysql_dbh;
my $nrows;
foreach (@queries) {
	print $_ . ";\n";
	$nrows = $dbh->do($_) or die();
	($nrows > 0) ? printf("Query OK, %d rows affected\n", $nrows) : print "Query OK\n";
}
$dbh->disconnect;

if ($nrows == 0) {	# the last one 
	print "No orthology relationships have been established. This is most likely the case if nucleotide data is unavailable for any of the taxa you uploaded peptide sequences for.\n";
	print "Done.\n";
	exit; 
}
else {	# something has changed
	printf("Successfully loaded ortholog set %s into database.\n", $setname);
	exit;
}

#--------------------------------------------------
# # Functions follow 
#-------------------------------------------------- 
# Sub: mysql_check
# Check whether the result of a query is present or not, return appropriate
# Arguments: Scalar string QUERY
# Returns: 1 or 0 depending on presence of result
sub mysql_check {#{{{
	my $query = shift;
	unless ($query) { croak "Usage: mysql_check(QUERY)\n"; }
	my @results;
	my $dbh = Wrapper::Mysql::mysql_dbh;
	my $sql = $dbh->prepare($query);
	$sql->execute();
	if ($sql->fetchrow_array()) {
		return 1;
	}
	return 0;
}#}}}

# drop all tables. no really, all that start with $prefix.
sub drop_tables {#{{{
	my $dbh = Wrapper::Mysql::mysql_dbh() or exit(1);
	print 'DROPing tables: ', join(", ", values(%t)), "\n" if $verbose;
	foreach my $table (keys(%t)) {
		$dbh->do("DROP TABLE IF EXISTS $t{$table}") or die "Could not execute drop query: $!\n";
	}
}#}}}


# create tables. makes use of the %create_table hash.
sub create_tables {#{{{

	# the queries for the individual tables
	my %create_table = (#{{{
		# table: blastdbs
		'blastdbs' => "CREATE TABLE `$t{'blastdbs'}` (
			`id`           INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`setid`        INT UNSIGNED DEFAULT NULL, UNIQUE(setid),
			`blastdb_path` VARCHAR(255) DEFAULT NULL)",

		# table: ogs
		'ogs' => "CREATE TABLE `$t{'ogs'}` (
			`id`           INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`type`         INT(1),
			`taxid`        INT UNSIGNED NOT NULL, UNIQUE(taxid),
			`version`      VARCHAR(255))",

		# table: ortholog_set
		'ortholog_set' => "CREATE TABLE `$t{'orthologs'}` (
			`id`               INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`setid`            INT UNSIGNED NOT NULL,
			`ortholog_gene_id` VARCHAR(10)  NOT NULL,
			`sequence_pair`    INT UNSIGNED NOT NULL,
			UNIQUE INDEX (setid, ortholog_gene_id, sequence_pair))",

		# table: sequence_pairs
		'sequence_pairs' => "CREATE TABLE `$t{'seqpairs'}` (
			`id`           BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`taxid`        INT    UNSIGNED,
			`ogs_id`       INT    UNSIGNED,
			`aa_seq`       INT    UNSIGNED, UNIQUE(aa_seq),
			`nt_seq`       INT    UNSIGNED, UNIQUE(nt_seq), 
			`date`         INT    UNSIGNED,
			`user`         INT    UNSIGNED)",

		# table: sequences_aa
		'aa_sequences' => "CREATE TABLE `$t{'aaseqs'}` (
			`id`           BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`taxid`        INT             NOT NULL, INDEX(taxid),
			`header`       VARCHAR(512),             INDEX(header(10)), UNIQUE(header(10)),
			`sequence`     MEDIUMBLOB,
			`user`         INT UNSIGNED,
			`date`         INT UNSIGNED)",

		# table: sequences_nt
		'nt_sequences' => "CREATE TABLE `$t{'ntseqs'}` (
			`id`           BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`taxid`        INT             NOT NULL, INDEX(taxid),
			`header`       VARCHAR(512),             INDEX(header(10)), UNIQUE(header(10)),
			`sequence`     MEDIUMBLOB,
			`user`         INT UNSIGNED,
			`date`         INT UNSIGNED)",

		# table: set_details
		'set_details' => "CREATE TABLE `$t{'set_details'}` (
			`id`           INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`name`         VARCHAR(255), UNIQUE(name),
			`description`  BLOB)",

		# table: taxa
		'taxa' => "CREATE TABLE `$t{'taxa'}` (
			`id`           INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`name`         VARCHAR(20),  UNIQUE(name),
			`longname`     VARCHAR(255), 
			`core`         TINYINT UNSIGNED NOT NULL)",

		# table: users
		'users' => "CREATE TABLE `$t{'users'}` (
			`id`           INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`name`         VARCHAR(255), UNIQUE(name))",

		# table: seqtypes
		'seqtypes' => "CREATE TABLE `$t{'seqtypes'}` (
			`id`           INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
			`type`         CHAR(3),     UNIQUE(type))",
	);#}}}

	# to start off with nt and aa sequence types
	my $insert_seqtypes = "INSERT IGNORE INTO $t{'seqtypes'} (type) VALUES ('nt'),('aa')";

	my $dbh = Wrapper::Mysql::mysql_dbh();
	foreach (values %create_table) {
		print $_, ";\n" if $verbose;
		$dbh->do($_) or die "Could not exec query: $!\n";
	}
	$dbh->do($insert_seqtypes);	# start off with 'nt' and 'aa' seqtypes
	$dbh->disconnect;
}#}}}

# sub: get_yn
# Get a response of the type 'y' or 'n'. Prompts the user until she complies :D
# returns 1 on 'y', 0 on 'n'
sub get_yn {
	local $| = 0;
	my $yn = readline(STDIN);
	chomp $yn;
	until ($yn =~ /^[yn]$/) {
		print "Response '$yn' not understood. Are you sure (y/n)? ";
		$yn = readline(STDIN);
		chomp $yn;
	}
	if ($yn eq 'n') {
		$| = 1;
		return 0;
	}
	$| = 1;
	return 1;
}

# Sub: load_taxon
# Loads sequence data into the database.
# Arguments: scalar string filename to nucleotide fasta file, scalar TRUE or FALSE. If TRUE, also:
#		scalar string BLAST directory for creating the BLAST database
# Returns: 1 on success, 0 otherwise
sub load_taxon {#{{{
	croak("Usage: load_taxon(INFILE, [1|0] [,BLAST_DIR])\n") unless scalar @_ == 2;
	my $inf = shift(@_);
	my $mode = shift(@_);
	# the two sequence tables are 'aaseqs' and 'ntseqs'
	# $seqtable and $otherseqtable assume opposing values, respectively,
	# depending on the mode in which the function is called.
	# the same goes for the columns $seqcol and $otherseqcol.
	my $seqtable      = $mode ? $t{'aaseqs'} : $t{'ntseqs'};
	my $otherseqtable = $mode ? $t{'ntseqs'} : $t{'aaseqs'};
	my $seqcol        = $mode ? 'aa_seq'     : 'nt_seq';
	my $otherseqcol   = $mode ? 'nt_seq'     : 'aa_seq';
	my $type = $mode          ? 2            : 1;  # 1 is 'nt', 2 is 'aa'
	my $diemsg = "Fatal: Sequence header format wrong in line %d. Expected format must be '>TAXSH Identifier foobar'. See documentation for more information\n";

	# get taxon shorthand
	my $list = &Wrapper::Mysql::mysql_get("SELECT * FROM $t{'taxa'} WHERE `core` = '1'");
	print "This is a list of present taxa in the database:\n";
	for (my $i = 0; $i < scalar(@$list); ++$i) {
		printf("%2d. %s %s\n", $i+1, $$list[$i][1], $$list[$i][2]);
	}
	print "Please enter a number to select one of the taxa (don't fuck with this, no error-catching has been implemented yet): ";
	my $in = <STDIN>;
	chomp $in;
	my $taxon;

	# make sure the user doesn't fuck up
	while (($in !~ /^\d+$/) or ($in > scalar(@$list)) or ($in < 1) or !defined($in)) {
		print "Not understood: '$in'. DO NOT FUCK WITH THIS. Enter one of the numbers to select one of the taxa: ";
		$in = <STDIN>;
		chomp $in;
	}

	# correlate that number to the list of taxa
	$taxon = $$list[$in-1][0];
	printf("You picked %d: %s (%s).\n", $in, $$list[$in-1][2], $$list[$in-1][1]);
	print "Please enter the official gene set (OGS) version for this data file: ";
	my $ogsversion = <STDIN>;
	chomp $ogsversion;

	# create a csv file for rapid uploading into the database
	my $tmpfh = File::Temp->new(UNLINK => 1);
	my $infh = Seqload::Fasta->open($inf);
	while (my ($hdr, $seq) = $infh->next_seq()) {
		$hdr =~ s/,/_/g; # remove commas from the header as they confuse the csv parser
		$seq =~ s/-//g;	# remove all gaps from the sequence

		# check if the sequence consists of valid characters
		if ($mode) {
			if ($seq =~ /([^ACDEFGHIKLMNPQRSTVWYX*])/) {
				# change all Us to X if requested
				if ($u_subst and $seq =~ s/U/$u_subst/gi) {
					warn("Warning: Selenocysteine character ('U') replaced with '$u_subst' in sequence '$hdr'.\n");
				}
				else {
					warn("Warning: Sequence $hdr contains nonstandard amino acid symbol '$1'! Make sure your alignment program tolerates this.\n");
				}
			}
		}
		else {
			if ($seq =~ /([^ATCGN*])/i) {
				warn("Warning: Sequence $hdr contains nonstandard nucleic acid symbol '$1'!\n");
			}
		}

		# everything seems ok, write to csv file
		print $tmpfh "$taxon,$hdr,$seq\n";
	}

	print "Data looks OK, uploading...\n";

	# queries:
	# TODO rewrite this part using parametrized queries to protect from SQL injections?
	my @queries = (
		# create the temporary table
		"CREATE TABLE $temptable (
		`id`       INT      NOT NULL PRIMARY KEY AUTO_INCREMENT,
		`taxid`    CHAR(5)      NOT NULL,
		`header`   VARCHAR(255) NOT NULL,
		`sequence` MEDIUMBLOB)",

		# load data into temp table
		"LOAD DATA LOCAL INFILE '$tmpfh' 
		INTO TABLE $temptable 
		FIELDS TERMINATED BY ',' 
		(taxid, header, sequence)",

		# insert data into main table. IGNORE is important to avoid duplicates without throwing errors.
		"INSERT IGNORE INTO $seqtable (taxid, header, sequence)
		SELECT $t{'taxa'}.id, $temptable.header, $temptable.sequence 
		FROM $temptable 
		LEFT JOIN $t{'taxa'} 
		ON $temptable.taxid = $t{'taxa'}.id",

		# insert sequence pairs relationships
		"INSERT INTO $t{'seqpairs'} (taxid, ogs_id, $otherseqcol, $seqcol, date, user) 
		SELECT $t{'taxa'}.id, $t{'ogs'}.id, $otherseqtable.id, $seqtable.id, UNIX_TIMESTAMP(), '$mysql_dbuser'
		FROM $t{'taxa'}
		RIGHT JOIN $seqtable
		ON $seqtable.taxid = $t{'taxa'}.id
		LEFT JOIN $t{'ogs'}
		ON $t{'taxa'}.id = $t{'ogs'}.taxid
		LEFT JOIN $otherseqtable
		ON $otherseqtable.header = $seqtable.header
		WHERE $t{'taxa'}.id = '$taxon'
		ON DUPLICATE KEY UPDATE $t{'seqpairs'}.$seqcol = $seqtable.id,
		$t{'seqpairs'}.$otherseqcol = $otherseqtable.id",

		# update OGS table
		"INSERT IGNORE INTO $t{'ogs'} (type, taxid, version) VALUES ($type, $taxon, $ogsversion)"

	);
	# execute all queries
	$dbh = Wrapper::Mysql::mysql_dbh();
	$dbh->do("DROP TABLE IF EXISTS $temptable") or return 0;
	foreach (@queries) {
		print "$_\n";
		my $nrows = $dbh->do($_) or return 0;
		printf("Query OK, %d rows affected.\n", $nrows);
	}
	$dbh->disconnect();
	# TODO rewrite this part using parametrized queries to protect from SQL injections?
	my $seqpairs = Wrapper::Mysql::mysql_get("SELECT COUNT(*) FROM $t{'aaseqs'} WHERE $t{'aaseqs'}.taxid = '$taxon'");
	printf("Loaded %d sequences into database %s on %s.\n", $$seqpairs[0][0], $mysql_dbname, $mysql_dbserver);
	return 1;
}#}}}

# Sub: load_peptides
# Loads peptide data into the database and re-generates the BLAST databases
# Arguments: scalar string filename
# Returns: true on success, false otherwise
sub load_peptides {
	my $inf = shift;
}

# Sub: create_blastdb
# Generates a BLAST database 
# Expects: scalar string dirname
# Returns: File::Spec path object for the BLAST database
sub create_blastdb {#{{{
	my $infiles = shift;
	my $taxsh = '';
	if (scalar(@_) > 0) {
		$taxsh = shift;
	}
	else {
		($taxsh = $infile) =~ s/\.(fa|fas|fasta|fsta|fsa)$//;
	}
	if (&check_if_fasta == 0) {
		return 0;
	}
	# TODO rewrite this part using parametrized queries to protect from SQL injections?
	# TODO make this work
	my $blastdir = &Wrapper::Mysql::mysql_get("SELECT blastdb_path FROM $t{'blastdbs'} WHERE  = ");
	my $outfile = File::Spec->catfile($taxsh);
	my @makeblastdbcmd = qq(makeblastdb -in $infile -out $outfile -input_type fasta -title $taxsh);
}#}}}

# Sub: get_setname
# Listens for the set name on STDIN
# Arguments: none
# Returns: scalar string setname
sub get_setname {#{{{
	print "Enter the set name (required; ASCII only): ";
	$setname = <STDIN>;
	chomp $setname;
	if ($setname =~ /[^a-zA-Z0-9_]/) {
		die "Error: Must be alphanumeric (a-z, 0-9, and underscore).\n";
	}
	return $setname;
}#}}}

sub getblastdir {#{{{
	# TODO rewrite this part using parametrized queries to protect from SQL injections?
	my $bd = &Wrapper::Mysql::mysql_get("SELECT blastdb_path FROM $t{'blastdbs'} LIMIT 1");
	if (!$bd) {
		print "Enter the location where the BLAST database directories are located (required): ";
		$blastdir = <STDIN>;
		chomp $blastdir;
	}
	else {
		$blastdir = $$bd[0][0];	# array of arrays, only element
	}
	return $blastdir;
}#}}}


sub list_sets {
	my $sets = Wrapper::Mysql::get_ortholog_sets();
	my $maxlen_set  = 0;
	my $maxlen_desc = 0;
	# determine maximum length of set names for the table
	foreach (keys(%$sets)) {
		$maxlen_set = length($_) if (length($_) > $maxlen_set);
		$maxlen_desc = length($$sets{$_}) if (length($$sets{$_}) > $maxlen_desc);
	}
	print "The following ortholog sets are presently installed:\n";
	printf("%-${maxlen_set}s   %-${maxlen_desc}s\n", 'Set name', 'description');
	printf("%-${maxlen_set}s---%-${maxlen_desc}s\n", '-' x $maxlen_set, '-' x $maxlen_desc);
	foreach (sort keys(%$sets)) {
		printf("%-${maxlen_set}s   %s\n", $_, $$sets{$_});
	}
	return 1;
}

sub list_ogs {
	my $ogs = Wrapper::Mysql::get_list_of_ogs();
	my $maxlen_longname = 0;
	my $maxlen_version  = 0;
	foreach (keys %$ogs) {
		$maxlen_version = length($_) if (length($_) > $maxlen_version);
		$maxlen_longname = length($$ogs{$_}) if (length($$ogs{$_}) > $maxlen_longname);
	}
	print "The following taxa are presently installed with OGS and proteomes:\n";
	printf("%-${maxlen_longname}s  %s\n", 'Taxon', 'OGS version');
	printf("%-${maxlen_longname}s  %11s\n", '-' x 5, '-' x 11);
	foreach (sort keys(%$ogs)) {
		printf("%-${maxlen_longname}s  %s\n", $_, $$ogs{$_});
	}
	return 1;
}

sub list_set_details {
	my %reftaxa_of = Wrapper::Mysql::get_taxa_in_all_sets();
	my $maxlen_setname  = 0;
	foreach my $setname (keys %reftaxa_of) {
		$maxlen_setname = length($setname) if (length($setname) > $maxlen_setname);
	}
	printf "%-${maxlen_setname}s  %s\n", 'Set name', 'reference taxa';
	printf "%-${maxlen_setname}s--%s\n", '-' x 11, '-' x 14;
	foreach my $setname (sort keys %reftaxa_of) {
		printf("%-${maxlen_setname}s  %s\n", $setname, $reftaxa_of{$setname});
	}
	return 1;
}

sub list_ests {
	my %estlist = ();

	# TODO blah blah blah
	# use RIGHT JOIN etc:
	# select * from o_sequence_pairs right join o_taxa on o_sequence_pairs.taxid = o_taxa.id where o_sequence_pairs.id IS NULL;

}

# Sub: delete_set
# Delete a set from the database
# Arguments: scalar string setname
# Returns: true if successful, false otherwise
sub delete_set {#{{{
	my $setname = shift or confess('Usage: delete_set($SETNAME)');
	my $this_set_dir = File::Spec->catdir($setdir, $setname);
	# TODO rewrite this part using parametrized queries to protect from SQL injections?
	my $data = &Wrapper::Mysql::mysql_get("SELECT * FROM $t{'set_details'} WHERE name = '$setname'");
	if (scalar @{$data} > 1) { die("Oops: Set name not unique. Double-check your database setup!\n") }
	elsif (scalar @{$data} == 0) { die("Oops: Set '$setname' does not exist in the database!\n") }
	my $setid = $$data[0][0];
	my @queries = (
		"DELETE FROM $t{'set_details'} WHERE $t{'set_details'}.`id`  = '$setid'",
		"DELETE FROM $t{'orthologs'}   WHERE $t{'orthologs'}.`setid` = '$setid'",
		"DELETE FROM $t{'blastdbs'}    WHERE $t{'blastdbs'}.`setid`  = '$setid'",
	);
	
	my $dbh = Wrapper::Mysql::mysql_dbh();
	foreach (@queries) {
		print $_, "\n";
		$dbh->do($_) or die();
	}
	$dbh->disconnect();

	if (-e $this_set_dir) {
		File::Path->remove_tree($this_set_dir);
		printf "Directory $this_set_dir unlinked.\n"; 
	}
	return 1;
}#}}}

sub delete_ogs {
	my $ogsfile = shift @_ or confess("Usage: delete_ogs(OGSFILE)");

	# get taxon shorthand
	# TODO rewrite this part using parametrized queries to protect from SQL injections?
	my $list = &Wrapper::Mysql::mysql_get("SELECT * FROM $t{'taxa'} WHERE `core` = '1'");
	print "This is a list of present taxa in the database:\n";
	for (my $i = 0; $i < scalar(@$list); ++$i) {
		printf("%2d. %s %s\n", $i+1, $$list[$i][1], $$list[$i][2]);
	}
	print "Please enter a number to select one of the taxa (don't fuck with this, no error-catching has been implemented yet): ";
	my $in = <STDIN>;
	chomp $in;
	my $taxid;

	# make sure the user doesn't fuck up
	while (($in !~ /^\d+$/) or ($in > scalar(@$list)) or ($in < 1) or !defined($in)) {
		print "Not understood: '$in'. DO NOT FUCK WITH THIS. Enter one of the numbers to select one of the taxa: ";
		$in = <STDIN>;
		chomp $in;
	}
	
	# correlate that number to the list of taxa
	$taxid = $$list[$in-1][0];

	# open the file and delete each sequence (slow, I know...)
	my $ogsfh = Seqload::Fasta->open($ogsfile);
	my $dbh = Wrapper::Mysql::mysql_dbh();
	my $count = 0;
	while (my ($h, $s) = $ogsfh->next_seq()) {
		my $sth = $dbh->prepare("DELETE FROM $mysql_table_aaseqs WHERE header = ? LIMIT 1");
		$sth->execute( $h );
		$count += $sth->rows;
	}

	my $sth = $dbh->prepare("DELETE FROM $mysql_table_ogs WHERE taxid = ?");
	$sth->execute( $taxid );
	$dbh->disconnect();
	return $count;
}

# Documentation after the code#{{{
=head1 NAME 

B<orthograph_manager> - prepare a MySQL database for running Orthograph

=head1 SYNOPSIS

B<orthograph_manager> -u USERNAME -p PASSWORD FASTAFILE

=head1 DESCRIPTION

Prepares a core orthologs database for running Orthograph. Basically, reads a fasta
file and loads its content into a temporary table. Due to the usage of the
MySQL LOAD INFILE routine, this process is pretty fast. After that, the content
is processed and distributed into the Orthograph database structure.

This script is designed to work with ortholog set fasta files generated by
OrthoDB5 (http://cegg.unige.ch/orthodb5). Therefore, the FASTA headers have
to be formatted in a certain way:

  >TAXSH:xxxxxx SomeIdentifier EOG5XXXXX OriginalIdentifier 

Where the following applies: 

=over 2

=item * TAXSH is the 5-letter taxon shorthand that OrthoDB uses; xxxxxx is an identifier that nobody knows what it's good for.

=item * SomeIdentifier is just some other identifier (I haven't figured out what this corresponds to)

=item * EOG5XXXXX is the OrthoDB ID. This will later be used to cluster the orthologs together.

=item * OriginalIdentifier is the original (i.e., official gene set) identifier for this particular sequence.

=back

None of these need to be unique, but the combination of all three must be.

The fields must be separated by whitespace and in this particular order. The
orthograph_manager script does not perform any recognition on the fields whatsoever. If
you download your orthologous sequences from OrthoDB, no problems should arise.

Nucleotide fasta files need a similar, but simpler format:

  >TAXSH Identifier

Where TAXSH is the 5-letter taxon shorthand that OrthoDB uses, and Identifier is
the sequence ID, which may or may not correspond to IDs that occur in ortholog
set headers. This is later used for identification of corresponding
peptide-nucleotide pairs. Text after the Identifier will be ignored.

B<orthograph> expects a certain table structure. You may create it by hand using
the SQL statement found at the end of this manual by or whatever workflow you
fancy, or you may run B<orthograph_manager -c> once, which does the same thing.

=head1 OPTIONS

=head2 -p PASSWORD

Password for the connection. No default; this must be set.

=head2 -u USERNAME

Username for the connection. No default; this must be set.

=head2 -c

(Re-)creates the necessary table structure. B<Careful, this will wipe out everything
you had in the table.> You should not do this more than once in the process of using
Orthograph unless you know what you are doing.

=head2 -D DATABASE

Database name to use. Defaults to 'orthograph'.

=head2 -h HOST

Database server. Defaults to '127.0.0.1', which is (mostly) equivalent to
'localhost'.

=head2 -prefix PREFIX

Table name prefix. Useful if you want to employ multiple orthograph instances on
the same database. Tables will be named 'prefix_tablename'. The underscore is
added automatically. Defaults to 'orthograph'.

=head2 -o

Overwrite existing data. This is necessary when re-loading an ortholog set with
a name that already exists in the database. Be cautious; this may cause data
disintegration (duplicates and orphan entries and stuff like that). Unless you
know what you are doing, prefer deleting and re-creating to overwriting.

=head2 -r

Reassign orthologs. May be called manually after proteome data has been added
to establish orthology relationships between nucleotide and peptide sequences.
This is called automatically when adding an ortholog set from OrthoDB and when
adding nucleotide data..

=head2 -t TEMPTABLE

Temporary table name to use. Defaults to 'temp'.

=head2 -nuc 

Load nucleotide data. These fasta files must have headers formatted as
described above. The script will load them into the database and re-assign the
nucleotide/peptide pairs based on the headers (so these must correspond).

=head2 -pep

Load peptide data. These fasta files must have headers formatted as follows:

  >TAXSH SEQUENCE_ID

The script will load them into the database and re-assign the
nucleotide/peptide pairs based on the headers (so these must correspond).

=cut#}}}

=head1 AUTHOR

Written by Malte Petersen <mptrsen@uni-bonn.de>

=head1 COPYRIGHT

Copyright (C) 2012 Malte Petersen 

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

=head1 APPENDIX 

=head2 SQL dump for creating the database structure

# TODO include complete MySQL dump for the database
=cut

#}}}
