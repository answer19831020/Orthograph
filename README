ORTHOGRAPH: Orthology prediction using a Graph-based, Reciprocal Approach with
Hidden Markov models

SYSTEM REQUIREMENTS
===================

Orthograph requires the following software packages to be installed on the system:

Package      Version Download from
-------------------------------------------------------------------------------
MySQL        5.1     http://www.mysql.com
HMMer3       3.0     http://hmmer.janelia.org
NCBI BLAST+  2.2.25+ ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/
Exonerate    2.2.0   http://www.ebi.ac.uk/~guy/exonerate/ 

The standard Perl modules File::Spec, File::Basename, File::Path, IO::File and
IO::Dir (used for platform-independent path handling) as well as DBI and
DBD::Mysql for database handling and Digest::SHA should be present in your
Perl distribution. Update your Perl installation if not and see [1] and [2] if
you are installing Orthograph on a Windows system under Cygwin. You might run into
problems getting the MySQL driver, HMMer3 and Exonerate to work. Don't use
Windows.

If your Perl installation was not compiled with thread support, but you would
like to use Orthograph with multithreading emulation on multiprocessor platforms,
you may want to install the 'forks' module from CPAN. Alternatively, you can
run Orthograph single-threadedly, of course. 

At the moment, threads are not implemented anyway.

QUICKSTART
==========

For a fast start into analysis using Orthograph, follow these steps. If anything
doesn't work, you'll have to read the rest of this document to find out why :-)

1. Set up the MySQL database. 

There must exist a database for your perusal and a database user must have
permissions to DROP and CREATE tables and of course to SELECT, DELETE and INSERT
into them. Google "mysql create database" or something if you don't know how to
create the database. Make a note of your database name. You will need it later.

2. Create the tables. Make the orthograph_manager script executable and use it:

	chmod +x orthograph_manager
	./orthograph_manager -u USERNAME -p PASSWORD -D DBNAME -c 

Supply MySQL username, password and the database name (default: "orthograph"). The
-c switch tells the script to setup the database structure for Orthograph. It will
create a number of tables, all of which start with the prefix 'orthograph_'. 

3. Upload your ortholog set into the database:

	./orthograph_manager -u USERNAME -p PASSWORD FASTAFILE

Supply username and password and a fasta file. If you picked a database name
other than 'orthograph', you must also provide it with the -D option:

	./orthograph_manager -u USERNAME -p PASSWORD -D DATABASE FASTAFILE

You will be asked for information about the ortholog set you are loading. The
fasta file must have an OrthoDB-style header format as in the following example:

	>AAEGY:m0cp83 AAEL005334 EOG5000ZK AAEL005334-PA [foo bar baz]

That is, there must exist five space-separated fields, the last one of which may
contain whitespace as well. This is output by OrthoDB by default, so you don't
have to worry about that if you got your orthology data from OrthoDB. If not,
read `perldoc orthograph_manager` for further information. Make a note of your ortholog
set name. You will need it later.

4. Load proteome sequences into the database :

	./orthograph_manager -u USERNAME -p PASSWORD -pep FASTAFILE

You need to load data for every taxon separately (this may change in the
future), and you should load data for as many taxa in the orthologs file as
possible. You will be asked for information about the file you are loading.
These sequences are used for the reciprocal BLAST databases. If you don't load
any peptide data, your analysis will be flawed. The sequences must be in fasta
files with the following header format:

	>TAXSH ID foo bar

The TAXSH must be a five-character taxon shorthand that is used in the OrthoDB
data. At least some of the IDs must correspond to the fourth header field in the
OrthoDB file. Repeat this step for as many taxa as you have peptide sequences
for.

If you made a mistake during input of the information, you may cancel the
process at any time using Ctrl+C. 

4a. Optional: Load nucleotide data into the database:

	./orthograph_manager -u USERNAME -p PASSWORD -nuc FASTAFILE

They must have the same header format as the peptide sequences. At the moment,
output of nucleotide data is not implemented anyway. 

6. Create a config file. 

Edit the supplied config file orthograph.conf.example, it's commented to help you
start off. Most options are self-explanatory.

7. Create the required database structure for Orthograph. Make orthograph executable
and run it with the -prepare option:

	chmod +x orthograph
	./orthograph -prepare

If you picked a non-default database name AND you didn't save your config file
in orthograph.conf, you must tell Orthograph where to find all that information
with the -c option:

	./orthograph -c CONFIGFILE -prepare

8. Start Orthograph! 

  ./orthograph 

Orthograph expects its config file in orthograph.conf. If you didn't save your config
file as orthograph.conf, you must tell Orthograph where it is with the -c option:

	./orthograph -c CONFIGFILE

9. Get some coffee and watch.

Orthograph generates the profile hidden Markov models (pHMMs) for your ortholog set, if
they don't exist. This may take a long time depending on the size of your set,
but rest assured, once the pHMMs exist, subsequent analyses will be much faster.

After that, your input file is searched using all pHMMs. Candidate orthologs are
cached and later verified with a reciprocal search against the BLAST database of
all proteomes.

10. Examine results in the output directory.

11. Profit!


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++ The rest of this document is outdated! So is `perldoc orthograph`. +++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

SETUP
=====

The MySQL database must be setup prior to running Orthograph and must contain
both orthology information and peptide data. The script orthograph_manager is
provided for your convenience. Refer to its perldoc documentation for further
instructions.

INVOCATION
==========

Orthograph allows parsing a config file, which by default is named 'orthograph.conf'.
Available options can be obtained using 'perldoc orthograph'. Many options can be
set or overridden on the command line. For those switches, also see 'perldoc
orthograph'.

MySQL PERFORMANCE
=================

Orthograph makes extensive use of MySQL query caching. For optimal performance,
make sure that query caching is enabled in your MySQL instance.

Part of my Diploma thesis at the ZFMK/zmb, Bonn, Germany 
(c) 2011-2012 Malte Petersen <mptrsen@uni-bonn.de>

[1] http://cpansearch.perl.org/src/JWIED/DBD-mysql-2.1028/INSTALL.html#special systems
[2] http://forums.mysql.com/read.php?51,389833,389833
