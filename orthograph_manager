#!/usr/bin/perl
#--------------------------------------------------
# This file is part of Orthograph.
# Copyright 2012 Malte Petersen <mptrsen@uni-bonn.de>
# 
# Orthograph is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# Orthograph is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along with
# Orthograph. If not, see http://www.gnu.org/licenses/.
#-------------------------------------------------- 

use strict;
use warnings;
use Carp;
use Getopt::Long;
use File::Temp;     # temporary files
use File::Path qw(remove_tree make_path);	# this also uses File::Spec
use Seqload::Fasta qw(fasta2csv check_if_fasta); # object-oriented access to fasta files, fasta2csv converter
use DBI;
use DBD::mysql;
use Seqload::Fasta;
use Data::Dumper;


my $blastdir          = '';
my $create            = 0;
my $dbname            = 'orthograph';
my $dbserver          = '127.0.0.1';
my $delete_all        = 0;
my $delete_set        = '';
my $description;
my $isnucleotide      = 0;
my $ispeptide         = 0;
my $listests          = 0;
my $listogs           = 0;
my $listsets          = 0;
my $listtaxa          = 0;
my $name              = undef;
my $ogs_name;
my $overwrite         = 0;
my $prefix            = 'orthograph_';
my $pwd               = undef;
my $reassignorthologs = 0;
my $setdir            = '';
my $setname           = undef;
my $sql;
my $temptable         = 'temp';
my $total_seqs;
my $username          = undef;
# table names
my %t            = (
	'blastdbs'     => 'blastdbs',
	'ogs'          => 'ogs',
	'orthologs'    => 'orthologs',
	'seqpairs'     => 'sequence_pairs',
	'aaseqs'       => 'aaseqs',
	'ntseqs'       => 'ntseqs',
	'seqtypes'     => 'seqtypes',
	'set_details'  => 'set_details',
	'taxa'         => 'taxa',
	'users'        => 'users',
	'temp'         => 'temp',
);
	
my %names;


GetOptions(
	'D=s'          => \$dbname,
	'blastdir=s'   => \$blastdir,
	'c|create'     => \$create,
	'delete_all'   => \$delete_all,
	'delete_set=s' => \$delete_set,
	'h=s'          => \$dbserver,
	'le'           => \$listests,	# TODO implement
	'lo'           => \$listogs,
	'ls'           => \$listsets,
	'lt'           => \$listtaxa,
	'n=s'          => \$name,
	'nuc'          => \$isnucleotide,
	'o'            => \$overwrite,
	'p=s'          => \$pwd,
	'pep'          => \$ispeptide,
	'prefix=s'     => \$prefix,
	'r'            => \$reassignorthologs,
	'setdir=s'     => \$setdir,
	's=s'          => \$setname,
	't=s'          => \$temptable,
	'u=s'          => \$username,
	) or die "I don't know what you want me to do. Terminating.\n";
my $infile = shift @ARGV;

# make sure there is at least one underscore at the end of the prefix
$prefix =~ s/_$//;
$prefix .= '_';
# prepend the prefix to the table names. useful for dropping all of 'em.
$t{$_} = $prefix.$t{$_} foreach keys(%t);

# name == username unless defined name
$name = $username unless defined($name);

# to start off with nt and aa sequence types
my $insert_seqtypes = "INSERT IGNORE INTO $t{'seqtypes'} (type) VALUES ('nt'),('aa')";

# the queries for the individual tables
my %create_table = (#{{{
	# table: blastdbs
	'blastdbs' => "CREATE TABLE `$t{'blastdbs'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `setid`        INT(10) UNSIGNED DEFAULT NULL, UNIQUE(setid),
    `blastdb_path` VARCHAR(255)     DEFAULT NULL)",
	
	# table: ogs
	'ogs' => "CREATE TABLE `$t{'ogs'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `type`         CHAR(3),
    `taxid`        INT(10) UNSIGNED, UNIQUE(taxid),
    `version`      VARCHAR(255))",
	
	# table: ortholog_set
	'ortholog_set' => "CREATE TABLE `$t{'orthologs'}` (
    `id`               INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `setid`            INT(10) UNSIGNED NOT NULL,
    `ortholog_gene_id` VARCHAR(10)      NOT NULL,
    `sequence_pair`    INT(10) UNSIGNED NOT NULL,
    UNIQUE INDEX (setid, ortholog_gene_id, sequence_pair))",

	# table: sequence_pairs
	'sequence_pairs' => "CREATE TABLE `$t{'seqpairs'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `taxid`        INT(10) UNSIGNED NOT NULL,
    `ogs_id`       INT(10) UNSIGNED NOT NULL,
    `aa_seq`       INT(10) UNSIGNED NOT NULL, INDEX(aa_seq),
    `nt_seq`       INT(10) UNSIGNED, INDEX(nt_seq), 
    `date`         INT(11) UNSIGNED,
    `user`         INT(10) UNSIGNED, UNIQUE(aa_seq))",

	# table: sequences_aa
	# deleted: UNIQUE(header),
	'aa_sequences' => "CREATE TABLE `$t{'aaseqs'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `taxid`        INT(10) NOT NULL, INDEX(taxid),
    `header`       VARCHAR(512) NOT NULL, 
    `sequence`     MEDIUMBLOB,
    `user`         INT(10) UNSIGNED,
    `date`         INT(11) UNSIGNED)",

	# table: sequences_nt
	# deleted: UNIQUE(header),
	'nt_sequences' => "CREATE TABLE `$t{'ntseqs'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `taxid`        INT(10) NOT NULL, INDEX(taxid),
    `header`       VARCHAR(512) NOT NULL, 
    `sequence`     MEDIUMBLOB,
    `user`         INT(10) UNSIGNED,
    `date`         INT(11) UNSIGNED)",

	# table: set_details
	'set_details' => "CREATE TABLE `$t{'set_details'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `name`         VARCHAR(255), UNIQUE(name),
    `description`  BLOB)",

	# table: taxa
	'taxa' => "CREATE TABLE `$t{'taxa'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `name`         VARCHAR(20),  UNIQUE(name),
    `longname`     VARCHAR(255))",
	
	# table: users
	'users' => "CREATE TABLE `$t{'users'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `name`         VARCHAR(255), UNIQUE(name))",
	# table: seqtypes
	'seqtypes' => "CREATE TABLE `$t{'seqtypes'}` (
    `id`           INT(10) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `type`         CHAR(3),     UNIQUE(type))",
);#}}}

unless (defined $username and defined $pwd ) {
	die "Fatal: You must specify database username (-u) and password (-p) AND core-ortholog set name (-s).\n";
}

#--------------------------------------------------
# # if you really want to delete everything...
#-------------------------------------------------- 
if ($delete_all) {
	&drop_tables;
	print "OK.\n";
	exit;
}
#--------------------------------------------------
# # if you only want me to create the tables, fine. this will give you a clean slate.
#-------------------------------------------------- 
elsif ($create) {
	print "This will create a new orthograph database. Any existing database structures will be erased. Are you sure (y/n)? ";
	$| = 0;
	my $yn = readline(STDIN);
	chomp $yn;
	until ($yn =~ /^[yn]$/) {
		print "Response '$yn' not understood. Are you sure (y/n)? ";
		$yn = readline(STDIN);
		chomp $yn;
	}
	if ($yn eq 'n') {
		exit;
	}
	print "OK, whatever you say.\n";
	$| = 1;
	&drop_tables;
	&create_tables;
	print "Database cleared\n";
	exit;
}

elsif ($delete_set) { 
	&delete_set($delete_set);
	print "OK, removed set '$delete_set' completely.\n";
	exit;
}

#--------------------------------------------------
# Just list the present ortholog sets, then exit
# TODO make this less redundant!
#-------------------------------------------------- 
if ($listsets) {
	my $sets = &get_ortholog_sets();
	my $maxlen_set  = 0;
	my $maxlen_desc = 0;
	# determine maximum length of set names for the table
	foreach (keys(%$sets)) {
		$maxlen_set = length($_) if (length($_) > $maxlen_set);
		$maxlen_desc = length($$sets{$_}) if (length($$sets{$_}) > $maxlen_desc);
	}
	print "The following ortholog sets are presently installed:\n";
	printf("%-${maxlen_set}s  %-${maxlen_desc}s\n", 'Set name', 'description');
	printf("%-${maxlen_set}s--%-${maxlen_desc}s\n", '-' x $maxlen_set, '-' x $maxlen_desc);
	foreach (keys(%$sets)) {
		printf("%-${maxlen_set}s  %s\n", $_, $$sets{$_});
	}
	exit;
}

if ($listogs) {
	my $ogs = &list_ogs();
	my $maxlen_longname = 0;
	my $maxlen_version  = 0;
	foreach (keys %$ogs) {
		$maxlen_version = length($_) if (length($_) > $maxlen_version);
		$maxlen_longname = length($$ogs{$_}) if (length($$ogs{$_}) > $maxlen_longname);
	}
	print "The following taxa are presently installed with OGS and proteomes:\n";
	printf("%-${maxlen_longname}s  %s\n", 'Taxon', 'OGS version');
	printf("%s  %11s\n", '-' x 5, '-' x 11);
	foreach (keys(%$ogs)) {
		printf("%-${maxlen_longname}s  %s\n", $_, $$ogs{$_});
	}
	exit;
}

if ($listtaxa) {
	&list_set_details();
}

if ($isnucleotide) {
	# 0 for nucleotide
	&load_taxon($infile, 0) or die("Fatal: Nucleotide loading failed\n");
	exit;
}
elsif ($ispeptide) {
	unless ($blastdir) {
		$blastdir = &getblastdir();
	}
	# 1 for amino-acid
	&load_taxon($infile, 1, $blastdir) or die("Fatal: Peptide loading failed\n");
	exit;
}

# otherwise, this must be an orthodb file

#--------------------------------------------------
# # continue and gather information
#-------------------------------------------------- 

# TODO stop here if db structure is not present!

print "Setting up core ortholog set in $dbname on $dbserver... (press CTRL+C to abort)\n";

if (!$setname) { $setname = &get_setname() }

if (&mysql_check("SELECT name FROM $t{'set_details'} WHERE name = '$setname'")) {
	warn "Warning: An ortholog set with this name already exists in $dbname on $dbserver.\n";
	unless ($overwrite) {
		die "Pick a different name or use -o for overwriting.\n";
	}
	$| = 1;
	print "Overwriting existing entries (may cause data disintegration). ";
	print "Are you sure (y/n)? ";
	$| = 0;
	my $yn = readline(STDIN);
	chomp $yn;
	unless ($yn eq 'y') {
		print "OK, exiting.\n";
		exit;
	}
}

print "Enter a description for the set (optional but recommended): "; 
$description = <STDIN>;
chomp $description;

unless (defined $setname) { croak "Fatal: You must specify the core-ortholog set name (-s).\n" }

#--------------------------------------------------
# # read the input file and create a CSV file with everything we know 
#-------------------------------------------------- 

my $tmpfile = File::Temp->new(UNLINK=>0);

my $faobj = Seqload::Fasta->open($infile);
no warnings;	# disable warnings for printing of the NULL column
while (my ($hdr, $seq) = $faobj->next_seq()) {
	$seq =~ s/-//g;	# remove all gaps from the sequence
	if ($seq =~ /([^ACDEFGHIKLMNPQRSTVWYX*])/) {
		warn("Warning: Sequence $hdr contains nonstandard amino acid symbol '$1'! Make sure your alignment program tolerates this.\n");
	}
	++$total_seqs;
	# no commas in the header please, they confuse the csv parser
	$hdr =~ s/,/_/g;
	my @line = split(/\s+/, $hdr, 4);	# maximum of five fields, the last one may contain whitespace
	$line[3] =~ s/[,:]/_/;

	# if the original proteome is missing, this can't work
	if ($line[1] =~ /^\s*$/) { die("Fatal: Sequence ID missing from '$hdr'! See documentation and double-check your ortholog file.\n") }

	$line[0] =~ s/:.*//;	# remove everything from the colon
	printf $tmpfile "%s,%s,%s,%s,%s,%s,%s,%s\n", 
		$line[0],     # taxon shorthand
		undef,        # this will later be the full name
		$setname,	    # set name
		$line[2],     # orthodb id, e.g. EOG500001
		File::Spec->catdir($blastdir), # blast database directory
		$line[1],     # ogs id
		$seq,         # sequence
		$description; # set description
}
use warnings;	# resume yelling 
print "used file $tmpfile\n";
undef($faobj);
$tmpfile->close();

#--------------------------------------------------
# # create a temporary table for high-speed loading of the data. we can sort it out later.
#-------------------------------------------------- 

my $create_temp_table_query = "CREATE TABLE $temptable (
    `name`     VARCHAR(255), INDEX(name),
    `longname` VARCHAR(255),
		`orthoset` VARCHAR(255), INDEX(orthoset),
		`orthoid`  VARCHAR(255), INDEX(orthoid),
		`blastdb`  VARCHAR(255),
		`header`   VARCHAR(512), INDEX(header),
		`sequence` MEDIUMBLOB,
		`description` VARCHAR(255))";
my $loadquery = "LOAD DATA LOCAL INFILE '$tmpfile' 
  INTO TABLE $temptable FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' (
		name,
		longname,
		orthoset,
		orthoid,
		blastdb,
		header,
		sequence,
		description)";

my $dbh = &mysql_dbh();
$dbh->do("DROP TABLE IF EXISTS $temptable") or die "Fatal: Could not DROP TABLE $temptable\n";
$dbh->do($create_temp_table_query) or die "Fatal: Could not CREATE TABLE $temptable\n";
$dbh->do($loadquery) or die "Fatal: Could not LOAD DATA into temporary table $temptable\n";
$dbh->disconnect;

print "Successfully loaded $total_seqs sequences from $infile into $temptable on $dbserver.\n";

# get name and longname from the temp table; they do not get updated automatically
$dbh = &mysql_dbh();
$sql = $dbh->prepare("SELECT DISTINCT name, longname FROM temp");
$sql->execute();
while (my @result = $sql->fetchrow) {
	$names{$result[0]} = '';
}
$dbh->disconnect;

# ask the user for the taxon names that aren't complete
foreach (sort(keys %names)) {
	unless ($names{$_}) {
		print "Enter complete name for the shorthand '$_': ";
		$names{$_} = <STDIN>;
		chomp $names{$_};
	}
}

# update the temptable with the collected info
$dbh = &mysql_dbh;
foreach (keys %names) {
	$sql = $dbh->prepare("UPDATE $temptable SET longname='" . $names{$_} . "' WHERE name='" . $_ . "'");
	$sql->execute();
}
$dbh->disconnect;

#--------------------------------------------------
# # temptable is now complete. going to insert the data into the main table 
#-------------------------------------------------- 

# TODO check whether the proteome header format is right (protein id only)!
# TODO import the proteome data via a second temptable

my @queries = (
	# user name
	"INSERT IGNORE INTO $t{'users'} (name) VALUES ('$username')",
	# taxa (name, longname)
	"INSERT IGNORE INTO $t{'taxa'} (name, longname) 
    SELECT DISTINCT $temptable.name, $temptable.longname 
    FROM $temptable",
	# set name + description
	"INSERT IGNORE INTO $t{'set_details'} (name, description)
    SELECT DISTINCT $temptable.orthoset, $temptable.description 
    FROM $temptable LIMIT 1",
	# blast databases
	"INSERT IGNORE INTO $t{'blastdbs'} (setid, blastdb_path) 
    SELECT DISTINCT $t{'set_details'}.id, $temptable.blastdb 
    FROM $temptable LEFT JOIN $t{'set_details'} 
    ON $t{'set_details'}.name = $temptable.orthoset",
	# pep sequences
	"INSERT IGNORE INTO $t{'aaseqs'} (taxid, header, sequence, user, date) 
    SELECT $t{'taxa'}.id, $temptable.header, $temptable.sequence, $t{'users'}.id, UNIX_TIMESTAMP()
    FROM $temptable LEFT JOIN $t{'taxa'} 
    ON $temptable.name  = $t{'taxa'}.name
    INNER JOIN $t{'users'}
    ON $t{'users'}.name = '$username'",
	# delete everything where header or sequence is NULL or empty
	"DELETE FROM $t{'aaseqs'}
    WHERE $t{'aaseqs'}.header IS NULL
    OR $t{'aaseqs'}.sequence IS NULL
    OR $t{'aaseqs'}.header = ''
    OR $t{'aaseqs'}.sequence = ''",
	# sequence pairs (pep-nuc)
	"INSERT IGNORE INTO $t{'seqpairs'} (taxid, ogs_id, aa_seq, nt_seq, date, user)
    SELECT $t{'taxa'}.id, $t{'ogs'}.id, $t{'aaseqs'}.id, $t{'ntseqs'}.id, UNIX_TIMESTAMP(), $t{'users'}.id
    FROM $t{'taxa'}
    INNER JOIN $t{'aaseqs'}
    ON $t{'aaseqs'}.taxid = $t{'taxa'}.id
    LEFT JOIN $t{'ogs'}
    ON $t{'taxa'}.id = $t{'ogs'}.taxid
    LEFT JOIN $t{'ntseqs'}
    ON $t{'aaseqs'}.header = $t{'ntseqs'}.header
    INNER JOIN $t{'users'}
    ON $t{'users'}.name = '$username'",
	# orthologous groups
	"INSERT IGNORE INTO $t{'orthologs'} (setid, ortholog_gene_id, sequence_pair) 
    SELECT $t{'set_details'}.id, $temptable.orthoid, $t{'seqpairs'}.id 
    FROM $t{'aaseqs'} 
    INNER JOIN $temptable 
    ON $t{'aaseqs'}.header = $temptable.header 
    INNER JOIN $t{'seqpairs'} 
    ON $t{'seqpairs'}.aa_seq = $t{'aaseqs'}.id 
    INNER JOIN $t{'set_details'} 
    ON $t{'set_details'}.name = $temptable.orthoset",
);

$dbh = &mysql_dbh;
my $nrows;
foreach (@queries) {
	print $_ . ";\n";
	$nrows = $dbh->do($_) or die();
	($nrows > 0) ? printf("Query OK, %d rows affected\n", $nrows) : print "Query OK\n";
}
$dbh->disconnect;

if ($nrows == 0) {	# the last one 
	print "No orthology relationships have been established. This is most likely the case if nucleotide data is unavailable for any of the taxa you uploaded peptide sequences for.\n";
	print "Done.\n";
	exit; 
}
else {	# something has changed
	printf("Successfully loaded ortholog set %s into database.\n", $setname);
	exit;
}

#--------------------------------------------------
# # Functions follow 
#-------------------------------------------------- 
# Sub: mysql_dbh
# Returns a MySQL database handle
sub mysql_dbh {#{{{
	return DBI->connect("DBI:mysql:$dbname:$dbserver", $username, $pwd);
}#}}}

# Sub: mysql_check
# Check whether the result of a query is present or not, return appropriate
# Arguments: Scalar string QUERY
# Returns: 1 or 0 depending on presence of result
sub mysql_check {#{{{
	my $query = shift;
	unless ($query) { croak "Usage: mysql_check(QUERY)\n"; }
	my @results;
	my $dbh = &mysql_dbh;
	my $sql = $dbh->prepare($query);
	$sql->execute();
	if ($sql->fetchrow_array()) {
		return 1;
	}
	return 0;
}#}}}

# Sub: mysql_get
# Get from the database the result of a SQL query
# Arguments: QUERY as a string literal
# Returns: Reference to array of arrays (result lines->fields)
sub mysql_get {#{{{
	my $query = shift;
	unless ($query) { croak "Usage: mysql_get(QUERY)\n" }
  # prepare anonymous array
	my $results = [ ];
  # connect and fetch stuff
	my $dbh = &mysql_dbh;
	my $sql = $dbh->prepare($query);
	$sql->execute();
	while (my @result = $sql->fetchrow_array() ) {
		push(@$results, \@result);
	}
	$sql->finish();
	$dbh->disconnect; # disconnect ASAP
	return $results;
}#}}}

# drop all tables. no really, all that start with $prefix.
sub drop_tables {#{{{
	my $dbh = &mysql_dbh() or die "Could not connect to MySQL database server: $!\n";
	print 'DROPing tables: ', join(", ", values(%t)), "\n";
	foreach my $table (keys(%t)) {
		$dbh->do("DROP TABLE IF EXISTS $t{$table}") or die "Could not execute drop query: $!\n";
	}
}#}}}


# create tables. makes use of the %create_table hash.
sub create_tables {#{{{
	my $dbh = &mysql_dbh();
	foreach (values %create_table) {
		print $_, ";\n";
		$dbh->do($_) or die "Could not exec query: $!\n";
	}
	$dbh->do($insert_seqtypes);	# start off with 'nt' and 'aa' seqtypes
	$dbh->disconnect;
}#}}}

# Sub: load_taxon
# Loads sequence data into the database.
# Arguments: scalar string filename to nucleotide fasta file, scalar TRUE or FALSE. If TRUE, also:
#		scalar string BLAST directory for creating the BLAST database
# Returns: 1 on success, 0 otherwise
sub load_taxon {#{{{
	my $inf = shift(@_);
	my $mode = shift(@_);
	my $seqtable = $mode ? $t{'aaseqs'} : $t{'ntseqs'};
	my $otherseqtable = $mode ? $t{'ntseqs'} : $t{'aaseqs'};
	my $seqcol = $mode ? 'aa_seq' : 'nt_seq';
	my $otherseqcol = $mode ? 'nt_seq' : 'aa_seq';
	my $type = $mode ? 'nt' : 'aa';
	if ($mode) {
		my $blastdb = shift(@_) or croak("Usage: load_taxon(INFILE, [1|0] [,BLAST_DIR])\n"); 
	}
	my $diemsg = "Fatal: Sequence header format wrong in line %d. Expected format must be '>TAXSH Identifier foobar'. See documentation for more information\n";

	# get taxon shorthand
	my $list = &mysql_get("SELECT * FROM $t{'taxa'}");
	print "This is a list of present taxa in the database:\n";
	for (my $i = 0; $i < scalar(@$list); ++$i) {
		printf("%2d. %s %s\n", $i+1, $$list[$i][1], $$list[$i][2]);
	}
	print "Please enter a number to select one of the taxa (don't fuck with this, no error-catching has been implemented yet): ";
	my $in = <STDIN>;
	chomp $in;
	my $taxon;

	# make sure the user doesn't fuck up
	while (($in !~ /^\d+$/) or ($in > scalar(@$list)) or ($in < 1)) {
		print "Not understood: '$in'. DO NOT FUCK WITH THIS. Enter one of the numbers to select one of the taxa: ";
		$in = <STDIN>;
		chomp $in;
	}

	# correlate that number to the list of taxa
	$taxon = $$list[$in-1][0];
	printf("You picked %d: %s (%s).\n", $in, $$list[$in-1][2], $$list[$in-1][1]);
	print "Please enter the official gene set (OGS) version for this data file: ";
	my $ogsversion = <STDIN>;
	chomp $ogsversion;

	# create a csv file for rapid uploading into the database
	my $tmpfh = File::Temp->new(UNLINK => 1);
	my $infh = Seqload::Fasta->open($inf);
	while (my ($hdr, $seq) = $infh->next_seq()) {
		$hdr =~ s/,/_/g; # remove commas from the header as they confuse the csv parser
		$seq =~ s/-//g;	# remove all gaps from the sequence

		# check if the sequence consists of valid characters
		if ($mode) {
			if ($seq =~ /([^ACDEFGHIKLMNPQRSTVWYX*])/i) {
				warn("Warning: Sequence $hdr contains nonstandard amino acid symbol '$1'!\n");
			}
		}
		else {
			if ($seq =~ /([^ATCGN*])/i) {
				warn("Warning: Sequence $hdr contains nonstandard nucleic acid symbol '$1'!\n");
			}
		}

		# everything seems ok, write to csv file
		print $tmpfh "$taxon,$hdr,$seq\n";
	}

	print "Data looks OK, uploading...\n";

	# ok; insert ogs version into database
	my $dbh = &mysql_dbh();
	$dbh->do("INSERT IGNORE INTO $t{'ogs'} (type, taxid, version) VALUES ('$type', '$taxon', '$ogsversion')");
	$dbh->disconnect();

	# queries:
	my @queries = (
		# create the temporary table
		"CREATE TABLE $temptable (
		`id`       INT(11)      NOT NULL PRIMARY KEY AUTO_INCREMENT,
		`taxid`    CHAR(5)      NOT NULL,
		`header`   VARCHAR(255) NOT NULL,
		`sequence` MEDIUMBLOB)",
		# load data into temp table
		"LOAD DATA LOCAL INFILE '$tmpfh' 
		INTO TABLE $temptable 
		FIELDS TERMINATED BY ',' 
		(taxid, header, sequence)",
		# insert data into main table. IGNORE is important to avoid duplicates.
		"INSERT IGNORE INTO $seqtable (taxid, header, sequence)
		SELECT $t{'taxa'}.id, $temptable.header, $temptable.sequence 
		FROM $temptable 
		LEFT JOIN $t{'taxa'} 
		ON $temptable.taxid = $t{'taxa'}.id",
		# insert sequence pairs relationships
		"INSERT INTO $t{'seqpairs'} (taxid, ogs_id, $otherseqcol, $seqcol, date, user) 
		SELECT $t{'taxa'}.id, $t{'ogs'}.id, $otherseqtable.id, $seqtable.id, UNIX_TIMESTAMP(), '$username'
		FROM $t{'taxa'}
		RIGHT JOIN $seqtable
		ON $seqtable.taxid = $t{'taxa'}.id
		LEFT JOIN $t{'ogs'}
		ON $t{'taxa'}.id = $t{'ogs'}.taxid
		LEFT JOIN $otherseqtable
		ON $otherseqtable.header = $seqtable.header
		WHERE $t{'taxa'}.id = '$taxon'
		ON DUPLICATE KEY UPDATE $t{'seqpairs'}.$seqcol = $seqtable.id,
		$t{'seqpairs'}.$otherseqcol = $otherseqtable.id",
	);
	# execute all queries
	$dbh = &mysql_dbh();
	$dbh->do("DROP TABLE IF EXISTS $temptable") or return 0;
	foreach (@queries) {
		print "$_\n";
		my $nrows = $dbh->do($_) or return 0;
		printf("Query OK, %d rows affected.\n", $nrows);
	}
	$dbh->disconnect();
	my $seqpairs = &mysql_get("SELECT COUNT(*) FROM $t{'aaseqs'} WHERE $t{'aaseqs'}.taxid = '$taxon'");
	printf("Loaded %d new sequences into database %s on %s.\n", $$seqpairs[0][0], $dbname, $dbserver);
	return 1;
}#}}}

# Sub: load_peptides
# Loads peptide data into the database and re-generates the BLAST databases
# Arguments: scalar string filename
# Returns: true on success, false otherwise
sub load_peptides {
	my $inf = shift;
}

# Sub: create_blastdb
# Generates a BLAST database 
# Expects: scalar string dirname
# Returns: File::Spec path object for the BLAST database
sub create_blastdb {#{{{
	my $infiles = shift;
	my $taxsh = '';
	if (scalar(@_) > 0) {
		$taxsh = shift;
	}
	else {
		($taxsh = $infile) =~ s/\.(fa|fas|fasta|fsta|fsa)$//;
	}
	if (&check_if_fasta == 0) {
		return 0;
	}
	# TODO
	my $blastdir = &mysql_get("SELECT blastdb_path FROM $t{'blastdbs'} WHERE ");
	my $outfile = File::Spec->catfile($taxsh);
	my @makeblastdbcmd = qq(makeblastdb -in $infile -out $outfile -input_type fasta -title $taxsh);
}#}}}

# Sub: get_setname
# Listens for the set name on STDIN
# Arguments: none
# Returns: scalar string setname
sub get_setname {#{{{
	print "Enter the set name (required; ASCII only): ";
	$setname = <STDIN>;
	chomp $setname;
	if ($setname =~ /[^a-zA-Z0-9_]/) {
		die "Error: Must be alphanumeric (a-z, 0-9, and underscore).\n";
	}
	return $setname;
}#}}}

sub getblastdir {#{{{
	my $bd = &mysql_get("SELECT blastdb_path FROM $t{'blastdbs'} LIMIT 1");
	if (!$bd) {
		print "Enter the location where the BLAST database directories are located (required): ";
		$blastdir = <STDIN>;
		chomp $blastdir;
	}
	else {
		$blastdir = $$bd[0][0];	# array of arrays, only element
	}
	return $blastdir;
}#}}}

# Sub: get_ortholog_sets
# Get list of ortholog sets from the database
# Arguments: none
# Returns: hash reference of set names => description
sub get_ortholog_sets {#{{{
	my %sets = ();
	my $query = "SELECT * FROM $t{'set_details'}";
	my $data = &mysql_get($query);
	foreach my $item (@$data) {
		$sets{$$item[1]} = $$item[2];
	}
	return(\%sets);
}#}}}

#TODO merge with get_ortholog_sets() into one function that accepts a query
# Sub: list_ogs
# Get list of OGS in the database
# Arguments: none
# Returns: array reference (list of OGS)
sub list_ogs {#{{{
	my %ogslist = ();
	my $data = &mysql_get("SELECT DISTINCT $t{'taxa'}.name , $t{'ogs'}.version from $t{'aaseqs'} inner join $t{'seqpairs'} on $t{'aaseqs'}.id  = $t{'seqpairs'}.aa_seq inner join $t{'taxa'} on $t{'seqpairs'}.taxid = $t{'taxa'}.id inner join $t{'ogs'} on $t{'taxa'}.id = $t{'ogs'}.taxid");
	foreach my $item (@$data) {
		$ogslist{$$item[0]} = $$item[1];
	}
	return(\%ogslist);
}#}}}

sub list_set_details {
	my %setlist = ();
	my $data = &mysql_get("select distinct $t{'set_details'}.name, $t{'taxa'}.name from $t{'seqpairs'} inner join $t{'taxa'} on $t{'seqpairs'}.taxid = $t{'taxa'}.id inner join $t{'orthologs'} on $t{'orthologs'}.sequence_pair = $t{'seqpairs'}.id inner join $t{'set_details'} on $t{'orthologs'}.setid = $t{'set_details'}.id");
	foreach my $item (@$data) {
		$setlist{$$item[0]} .= ' ' . $$item[1];
	}
	printf "%s: %s\n", $_, $setlist{$_} foreach keys %setlist;
	exit;
}

sub list_ests {
	my %estlist = ();

	# TODO blah blah blah
	# use RIGHT JOIN etc:
	# select * from o_sequence_pairs right join o_taxa on o_sequence_pairs.taxid = o_taxa.id where o_sequence_pairs.id IS NULL;

}

# Sub: delete_set
# Delete a set from the database
# Arguments: scalar string setname
# Returns: true if successful, false otherwise
sub delete_set {#{{{
	my $setname = shift or confess('Usage: delete_set($SETNAME)');
	my $this_set_dir = File::Spec->catdir($setdir, $setname);
	my $data = &mysql_get("SELECT * FROM $t{'set_details'} WHERE name = '$setname'");
	if (scalar @{$data} > 1) { die("Oops: Set name not unique. Double-check your database setup!\n") }
	elsif (scalar @{$data} == 0) { die("Oops: Set '$setname' does not exist in the database!\n") }
	my $setid = $$data[0][0];
	my @queries = (
		"DELETE FROM $t{'set_details'} WHERE $t{'set_details'}.`id`  = '$setid'",
		"DELETE FROM $t{'orthologs'}   WHERE $t{'orthologs'}.`setid` = '$setid'",
		"DELETE FROM $t{'blastdbs'}    WHERE $t{'blastdbs'}.`setid`  = '$setid'",
	);
	
	my $dbh = &mysql_dbh();
	foreach (@queries) {
		print $_, "\n";
		$dbh->do($_) or die();
	}
	$dbh->disconnect();

	if (-e $this_set_dir) {
		File::Path->remove_tree($this_set_dir);
		printf "Directory $this_set_dir unlinked.\n"; 
	}
	return 1;
}#}}}

# Documentation after the code#{{{
=head1 NAME 

B<orthograph_manager> - prepare a MySQL database for running Orthograph

=head1 SYNOPSIS

B<orthograph_manager> -u USERNAME -p PASSWORD FASTAFILE

=head1 DESCRIPTION

Prepares a core orthologs database for running Orthograph. Basically, reads a fasta
file and loads its content into a temporary table. Due to the usage of the
MySQL LOAD INFILE routine, this process is pretty fast. After that, the content
is processed and distributed into the Orthograph database structure.

This script is designed to work with ortholog set fasta files generated by
OrthoDB5 (http://cegg.unige.ch/orthodb5). Therefore, the FASTA headers have
to be formatted in a certain way:

  >TAXSH:xxxxxx SomeIdentifier EOG5XXXXX OriginalIdentifier 

Where the following applies: 

=over 2

=item * TAXSH is the 5-letter taxon shorthand that OrthoDB uses; xxxxxx is an identifier that nobody knows what it's good for.

=item * SomeIdentifier is just some other identifier (I haven't figured out what this corresponds to)

=item * EOG5XXXXX is the OrthoDB ID. This will later be used to cluster the orthologs together.

=item * OriginalIdentifier is the original (i.e., official gene set) identifier for this particular sequence.

=back

None of these need to be unique, but the combination of all three must be.

The fields must be separated by whitespace and in this particular order. The
orthograph_manager script does not perform any recognition on the fields whatsoever. If
you download your orthologous sequences from OrthoDB, no problems should arise.

Nucleotide fasta files need a similar, but simpler format:

  >TAXSH Identifier

Where TAXSH is the 5-letter taxon shorthand that OrthoDB uses, and Identifier is
the sequence ID, which may or may not correspond to IDs that occur in ortholog
set headers. This is later used for identification of corresponding
peptide-nucleotide pairs. Text after the Identifier will be ignored.

B<orthograph> expects a certain table structure. You may create it by hand using
the SQL statement found at the end of this manual by or whatever workflow you
fancy, or you may run B<orthograph_manager -c> once, which does the same thing.

=head1 OPTIONS

=head2 -p PASSWORD

Password for the connection. No default; this must be set.

=head2 -u USERNAME

Username for the connection. No default; this must be set.

=head2 -c

(Re-)creates the necessary table structure. B<Careful, this will wipe out everything
you had in the table.> You should not do this more than once in the process of using
Orthograph unless you know what you are doing.

=head2 -D DATABASE

Database name to use. Defaults to 'orthograph'.

=head2 -h HOST

Database server. Defaults to '127.0.0.1', which is (mostly) equivalent to
'localhost'.

=head2 -prefix PREFIX

Table name prefix. Useful if you want to employ multiple orthograph instances on
the same database. Tables will be named 'prefix_tablename'. The underscore is
added automatically. Defaults to 'orthograph'.

=head2 -o

Overwrite existing data. This is necessary when re-loading an ortholog set with
a name that already exists in the database. Be cautious; this may cause data
disintegration (duplicates and orphan entries and stuff like that). Unless you
know what you are doing, prefer deleting and re-creating to overwriting.

=head2 -r

Reassign orthologs. May be called manually after proteome data has been added
to establish orthology relationships between nucleotide and peptide sequences.
This is called automatically when adding an ortholog set from OrthoDB and when
adding nucleotide data..

=head2 -t TEMPTABLE

Temporary table name to use. Defaults to 'temp'.

=head2 -nuc 

Load nucleotide data. These fasta files must have headers formatted as
described above. The script will load them into the database and re-assign the
nucleotide/peptide pairs based on the headers (so these must correspond).

=head2 -pep

Load peptide data. These fasta files must have headers formatted as follows:

  >TAXSH SEQUENCE_ID

The script will load them into the database and re-assign the
nucleotide/peptide pairs based on the headers (so these must correspond).

=cut#}}}

=head1 AUTHOR

Written by Malte Petersen <mptrsen@uni-bonn.de>

=head1 COPYRIGHT

Copyright (C) 2012 Malte Petersen 

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

=head1 APPENDIX 

=head2 SQL dump for creating the database structure

# TODO include complete MySQL dump for the database
=cut

#}}}
