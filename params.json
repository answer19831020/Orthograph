{"name":"Orthograph","tagline":"Orthology prediction using a graph-based, reciprocal approach with profile hidden Markov models","body":"ORTHOGRAPH: Orthology prediction using a Graph-based, Reciprocal Approach with\r\nProfile Hidden Markov models\r\n\r\nSYSTEM REQUIREMENTS\r\n===================\r\n\r\nOrthograph requires the following software packages to be installed on the\r\nsystem. The whole package was tested and works with these versions, and newer\r\nversions should be no problem. Downwards compatibility (i.e., older versions)\r\nhas not been tested. Should be fine, too, but be wary with MAFFT, its developers\r\nchange or drop features frequently across versions.\r\n\r\nPackage      | Version | Download from\r\n:------------|:--------|:-----------------------------------------------------------\r\nMySQL        | 5.1     | <http://www.mysql.com>\r\nMAFFT        | 6.951   | <http://mafft.cbrc.jp/alignment/software/>\r\nHMMer        | 3.0     | <http://hmmer.janelia.org>\r\nNCBI BLAST+  | 2.2.28+ | <ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/>\r\nExonerate    | 2.2.0   | <http://www.ebi.ac.uk/~guy/exonerate/>\r\n\r\nMake sure you get the correct versions for your operating system (most packages\r\nare provided as 32 bit and 64 bit versions).\r\n\r\nDon't worry about your Perl version if you run a reasonably recent Linux or\r\nUNIX system, such as Mac OS X, but see [here] [1] and [there] [2] if you are\r\ntrying to install the required packages on a Windows system under Cygwin (or\r\nnatively, for that matter). You might run into problems getting the MySQL\r\ndriver, HMMer3 and Exonerate to work. Really, don't use Windows. \r\n\r\nIf you get an error like \"Can't locate Some/Module.pm in @INC\", you need to\r\nupdate your Perl installation; see REQUIRED PERL MODULES for more information.\r\n\r\nDATA REQUIREMENTS\r\n=================\r\n\r\nOrthograph is an orthology prediction pipeline that attempts to map transcript\r\nsequences to known orthologous groups. It is not meant to infer orthology de\r\nnovo among genomes or transcriptomes, but relies on the orthology information in\r\npre-defined sets. Because of this requirement, it is essential that your input\r\ndata conforms to some data standards as listed below.\r\n\r\na) The clusters of orthologous groups (COGs). It consists of a Fasta file that\r\ncontains at least one sequence per selected COG. If you get your COGs from\r\nOrthoDB [1] (recommended), this is the case. In an OrthoDB file, each sequence\r\nheader contains a COG ID, in the case of OrthoDB version 5, it is something\r\nlike:\r\n\r\n\t>APISU:gmsk09 ACYPI007477 EOG500005 ACYPI007477-PA origin:RefSeq\r\n\r\nThe 'EOG500005' field is the COG ID. The sequence header must also contain an\r\nunambiguous sequence ID. In the above example, it is the second field, i.e.,\r\n'ACYPI007477'. \r\n\r\nb) The official gene set (OGS) for each of the taxa that are present in the\r\northolog set, i.e., contributed sequences to the COGs. The sequences for a\r\nsingle taxon must be in Fasta format, and all (!) sequences of this taxon that\r\noccur in the COGs must be in the OGS database as well. Their sequence identifier\r\nmust be unambiguously identical to the sequence ID in the Fasta file from\r\nOrthoDB. For example, this would be the related sequence for Acyrthosiphon pisum\r\nfrom the OGS:\r\n\r\n\t>ACYPI007477-PA origin:RefSeq\r\n\r\nThe OGS must be present as amino acid sequences, and may be present as\r\nnucleotide sequences. If the latter is missing, no nucleotide sequences can be\r\noutput. The sequence identifiers of corresponding nucleotide and amino acid\r\nsequences must be identical.\r\n\r\n\r\nQUICKSTART\r\n==========\r\n\r\nFor a fast start into analysis using Orthograph, follow these steps. They\r\nassume that all required software packages are installed and work. \r\n\r\n## 0. These conventions are used throughout this documentation:\r\n\r\n\t$ some_command\r\n\r\nThis means you should enter some_command at the shell prompt. The `$` sigil is\r\nnot part of the command.\r\n\r\n\tmysql> SOME STATEMENT;\r\n\r\nThis means you should enter SOME STATEMENT at the MySQL prompt. The `mysql>` is\r\nnot part of the statement, but the semicolon is.\r\n\r\n## 1. Set up the MySQL database. \r\n\r\nSkip this step if you already have a MySQL account and a database (and know\r\nwhat your credentials are).\r\n\r\nThere must exist a database for your usage and a database user must have the\r\nusual permissions on it. If you are the administrator of your local machine and\r\ninstalled MySQL yourself, you have those privileges. However, you should never\r\ndo ordinary work as root (the administrator), so let's create a working user.\r\nLogin to MySQL as root:\r\n\r\n\t$ mysql -u root -p\r\n\tEnter password:\r\n\r\nEnter the MySQL administrator password. You will be greeted by MySQL and then\r\ngiven a new prompt. Issue the following statement:\r\n\r\n\tmysql> CREATE USER 'USERNAME'@'localhost' IDENTIFIED BY 'PASSWORD';\r\n\r\nSubstitute USERNAME and PASSWORD with your username and password of choice. The\r\nsingle quotes are important. Next, you will create a database and grant the\r\nworking user the necessary permissions on it:\r\n\r\n\tmysql> CREATE DATABASE orthograph;\r\n\tmysql> GRANT ALL ON orthograph.* TO 'USERNAME'@'localhost';\r\n\r\nYou may use a different database name, of course. Make a note of your new user\r\nname, the password and the database name. You will need it later.\r\n\r\n## 2. Create a config file. \r\n\r\nMake a copy of the supplied config file orthograph.conf.example and rename this\r\ncopy to orthograph.conf. Edit it. The file is commented to help you start off.\r\nMost options are self-explanatory. \r\n\r\nFor now, it is sufficient to supply the MySQL settings (database, username,\r\npassword). \r\n\r\nNote: The config file is read by all three Orthograph tools. Especially the\r\nmandatory part of the file is important as it contains critical settings for\r\nthe database interaction. Without these settings none of the programs will\r\nwork.\r\n\r\n## 3. Create the tables. Make the orthograph_manager script executable and use it:\r\n\r\n\t$ chmod +x orthograph-manager\r\n\t$ ./orthograph-manager -create\r\n\r\nThe `-create` switch tells the script to setup the database structure for\r\nOrthograph.  It will create a number of tables, all of which start with the\r\nprefix `orthograph_` (or whatever prefix you chose in the config file). \r\n\r\n## 4. Upload your ortholog set into the database:\r\n\r\n\t$ ./orthograph-manager FASTAFILE\r\n\r\nYou will be asked for information about the ortholog set you are loading. If\r\nyou made a mistake during input of the information, you may cancel the process\r\nat any time using `Ctrl+C`. I'm sorry if you mistyped the last taxon name and have\r\nto start over :)\r\n\r\nThe fasta file must have an OrthoDB-style header format as in the following\r\nexample:\r\n\r\n\t>AAEGY:m0cp83 AAEL005334 EOG5000ZK AAEL005334-PA [foo bar baz]\r\n\r\nThat is, there must exist five space-separated fields, the last one of which may\r\ncontain whitespace as well. This is output by [OrthoDB] [3] by default, so you\r\ndon't have to worry about that if you downloaded your ortholog set from OrthoDB.\r\nHowever, dependent on your OrthoDB query, you may need to filter your file so\r\nthat it contains only the taxa you want in the ortholog set. A filter script is\r\nprovided upon request.  If you didn't get your data from OrthoDB, read `perldoc\r\northograph_manager` for further information. Make a note of your ortholog set\r\nname. You will need it later.\r\n\r\nTo check what sets have been uploaded so far, call `orthograph-manager -ls`. \r\n\r\n## 5. Load proteome sequences into the database :\r\n\r\n\t$ ./orthograph-manager -load-ogs-peptide FASTAFILE\r\n\r\nYou need to load data for every taxon separately (this may change in the\r\nfuture), and you should load data for as many taxa in the orthologs file as\r\npossible. You will be asked for information about the file you are loading.\r\nThese sequences are used for the reciprocal BLAST databases. If you don't load\r\nany peptide data, your analysis will be flawed. \r\n\r\nSome of the protein IDs (in the first header field of the OGS file) must\r\ncorrespond to the second header field in the OrthoDB file. This is important,\r\nas these are regarded as part of the ortholog groups. Repeat this step for as\r\nmany taxa in your ortholog set as you have peptide sequences for.\r\n\r\nIf you made a mistake during input of the information, you may cancel the\r\nprocess at any time using `Ctrl+C`. To check what OGS are present in the\r\ndatabase, call `orthograph-manager -lo`.\r\n\r\n## 6. Optional: Load nucleotide sequence data into the database:\r\n\r\n\t$ ./orthograph-manager -load-ogs-nucleotide FASTAFILE\r\n\r\nThe nucleotide sequences are expected to be the coding sequences for the\r\npeptide sequences you loaded earlier. The headers have to correspond EXACTLY,\r\nor they cannot be correlated and nucleotide output is not possible. For\r\nexample, these two headers are not equal, even though they look similar:\r\n\r\n\t>AAEL1307285-PA Q0C738 Bystin IPR007955\r\n\t>AAEL1307285-RA Q0C738 Bystin IPR007955\r\n\r\nMake sure the nucleotide sequences can be correlated to the proteome sequences\r\nby giving identical names to corresponding sequences.\r\n\r\n## 7. Create the required database structure for Orthograph.\r\n\r\nMake orthograph-analyzer executable and run it with the -prepare option:\r\n\r\n\t$ chmod +x orthograph-analyzer\r\n\t$ ./orthograph-analyzer -prepare\r\n\r\n## 8. Complete your config file if you didn't fill out everything before.\r\n\r\nSupply the rest of the mandatory settings and consider changing some optional\r\nones that will affect the searches.\r\n\r\n## 9. Start Orthograph! \r\n\r\n\t$ ./orthograph-analyzer\r\n\r\n## 10. Get some coffee, sit back and watch (or do something else).\r\n\r\nOrthograph generates the profile hidden Markov models (pHMMs) for your ortholog\r\nset, if they don't exist. This may take a long time depending on the size of\r\nyour set, but rest assured, once the pHMMs exist, subsequent analyses will be\r\nfaster by that amount of time. \r\n\r\nAfter that, your input file is searched using all pHMMs. Candidate orthologs\r\nare verified with a reciprocal search against the BLAST database of all\r\nproteomes in your ortholog set. The results are cached in the database.\r\nOrthograph-reporter can afterwards be used to establish ortholog relationships\r\nand report about the results in various ways. \r\n\r\nAfter orthograph-reporter is run, the output directory contains five\r\nsubdirectories:\r\n\r\na) hmmsearch. This contains all the HMMsearch output tables.\r\n\r\nb) blastp. This contains all the BLASTP output tables.\r\n\r\nc) aa. This contains the actual result of your analysis. The hit sequences are\r\noutput along with the core-ortholog sequences from your ortholog set, grouped\r\nby ortholog groups.\r\n\r\nd) nt. This contains the actual results on nucleotide level.\r\n\r\ne) log. This contains log files, such as the entire Orthograph output and the\r\nreport after running orthograph-reporter.\r\n\r\n## 11. ???\r\n\r\n## 12. Profit!\r\n\r\n\r\nCOMMON PROBLEMS\r\n===============\r\n\r\n\"No sequences found. Something went wrong. Check your input file. Exiting.\" \r\n\r\nReally, check your input file. Is it empty? Is it a valid fasta file? If it\r\nlooks ok, try deleting the translated version so Orthograph is forced to\r\nrecreate it. \r\n\r\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n+++ The rest of this document is outdated! So is `perldoc orthograph`. +++\r\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\nINVOCATION\r\n==========\r\n\r\nOrthograph allows parsing a config file, which by default is named\r\n`orthograph.conf`.  Available options can be obtained using `perldoc\r\northograph`. Many options can be set or overridden on the command line. For\r\nthose switches, also see `perldoc orthograph`.\r\n\r\nMySQL PERFORMANCE\r\n=================\r\n\r\nOrthograph makes extensive use of MySQL query caching. For optimal performance,\r\nmake sure that query caching is enabled in your MySQL instance. Also, if you\r\nplan to run multiple orthograph instances on the same database, you should\r\ndefinitely use table files instead of database files (`innodb_file_per_table`)\r\nand increase the lock wait timeout (`innodb_lock_wait_timeout`) to between 200\r\nand 600 to make sure that long queries (which may occur) do not block other\r\northograph processes.\r\n\r\nREQUIRED PERL MODULES\r\n=====================\r\nOrthograph uses only modules that are present in any standard Perl distribution. \r\nIf you get an error like \"Can't locate Some/Thing.pm in @INC\" it means that\r\nPerl can't find one of the required modules. Update your Perl installation if\r\nthis is the case and make sure it contains these modules:\r\n\r\n-  autodie\r\n-  strict\r\n-  warnings\r\n-  Archive::Tar\r\n-  Benchmark \r\n-  Carp\r\n-  Config\r\n-  DBD::mysql\r\n-  DBI\r\n-  Data::Dumper\r\n-  Digest::SHA\r\n-  File::Basename\r\n-  File::Path\r\n-  File::Temp\r\n-  FindBin\r\n-  Getopt::Long\r\n-  IO::Dir\r\n-  IO::File\r\n-  List::Util \r\n-  Time::HiRes\r\n\r\nPart of my Diploma thesis at the ZFMK/zmb, Bonn, Germany \r\n(c) 2011-2012 Malte Petersen <mptrsen@uni-bonn.de>\r\n\r\n[1]: <http://cpansearch.perl.org/src/JWIED/DBD-mysql-2.1028/INSTALL.html#special%20systems>\r\n[2]: <http://forums.mysql.com/read.php?51,389833,389833>\r\n[3]: <http://cegg.unige.ch/orthodb5>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}